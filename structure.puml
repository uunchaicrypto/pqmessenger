@startuml UunchaiCryptography
skinparam backgroundColor #f9f9f9
skinparam packageStyle rectangle
skinparam class {
  BorderColor Black
  ArrowColor Black
  BackgroundColor #fefefe
}
skinparam stereotypeCBackgroundColor #ddeeff
skinparam stereotypeABackgroundColor #ddffdd
skinparam stereotypeIBackgroundColor #ffdddd
skinparam shadowing true

package "Frontend (React)" #ddeeff {
  class App
  class Logout
  class DirectMessages
  class AuthContext
  class Chat
  class Home
  class Login
  class Dashboard
  class FriendRequests
  class Info
  class Notifications
  class AboutMe
  class AddFriend
  class Register

  App --> Login 
  App --> AuthContext : GetUserStatus
  App --> Register

  Register --> Login : Success

  Login --> AuthContext : UpdateUserStatus
  Login --> Dashboard : Success

  Dashboard --> Home : Default 
  Dashboard --> FriendRequests
  Dashboard --> Notifications
  Dashboard --> AboutMe
  Dashboard --> Logout 

  Logout --> AuthContext : UpdateUserStatus
  
  AboutMe --> AuthContext : GetUserStatus
  Home --> DirectMessages
  DirectMessages --> Chat
  Home --> AddFriend
  Chat --> Info
}

package "Backend (Flask)" #ddffdd {
  class Application
  class KyberService <<crypto>>
  class SecurityService <<auth>>
  class AuthRoutes <<routes>>
  class UserModel <<ORM>>
  class FriendModel <<ORM>>
  class MessageModel <<ORM>>

  Application --> AuthRoutes
  Application --> KyberService
  Application --> SecurityService
  AuthRoutes --> UserModel
  AuthRoutes --> Redis
  AuthRoutes --> Firestore
  KyberService --> PQClean
  Application --> Firestore
  Application --> Redis
  Application --> UserModel
  Application --> FriendModel
  Application --> MessageModel
}

package "Database & Cache" #ffdddd {
  class Firestore <<database>>
  class Redis <<cache>>

  package "Firestore Collections" {
    class Users {
      + userId : documentId
      + created_at : datetime
      + encrypted_secret_key : string
      + friends : array
      + iv : string
      + notifications : array
      + password_hash : string
      + public_key : string
      + salt : string
      + username : string
    }

    class Messages {
      + from : string
      + iv_message : string
      + encrypted_message : string
      + receiver_ciphertext : string
      + receiver_encrypted_key : string
      + receiver_iv : string
      + sender_ciphertext : string
      + sender_encrypted_key : string
      + sender_iv : string
      + timestamp : datetime
      + to : string
    }
  }

  Firestore --> Users
  Firestore --> Messages

  class "Redis Session Hash " as RedisSession {
      + sessionId : string
      + decrypted_private_key : string
      + aes_key : string
      + ct_sender : string
      + encrypted_aes_key : string
      + iv_sender : string
      -- TTL : 3600s --
  }

  Redis --> RedisSession
}


interface "AxiosClient"

Login --> "AxiosClient"
Dashboard --> "AxiosClient"
Chat --> "AxiosClient"
Notifications --> "AxiosClient"
FriendRequests --> "AxiosClient"
AddFriend --> "AxiosClient"


interface "REST API"

AxiosClient --> "REST API" : Axios

"REST API" --> Application
@enduml