@startuml UunchaiCryptography

skinparam backgroundColor #f9f9f9
skinparam packageStyle rectangle
skinparam class {
  BorderColor Black
  ArrowColor Black
  BackgroundColor #fefefe
  Padding 8
  FontSize 10
}
skinparam packagePadding 10
skinparam ArrowFontSize 10
skinparam roundcorner 5
skinparam shadowing true

' Frontend
package "Frontend (React)" #ddeeff {
  class App
  class Login
  class Register
  class AuthContext
  class Dashboard
  class Home
  class DirectMessages
  class Chat
  class AddFriend

  package "Social Features" {
    class FriendRequests
    class Notifications
    class AboutMe
    class Logout
  }

  App --> Login
  App --> Register
  App --> AuthContext : GetUserStatus
  App --> Dashboard

  Register --> Login : Success
  Login --> AuthContext : UpdateUserStatus
  Login --> Dashboard : Success

  Dashboard --> Home : Default
  Dashboard --> "Social Features"

  Home --> DirectMessages
  Home --> AddFriend
  DirectMessages --> Chat
}

' Backend
package "Backend (Flask)" #ddffdd {
  class Application
  class AuthRoutes <<routes>>
  class KyberWrapper <<Kyber KEM>>
  class Security
  class UserModel
  class Databases {
    Firestore
    Redis Cache
  }
  class KyberLibrary.dll <<Kyber library>> {
    Windows
  }
  class KyberLibrary.so <<Kyber library>> {
    Linux
  }

  Application --> AuthRoutes
  Application --> Databases : Init DBs
  AuthRoutes --> UserModel : Queries
  AuthRoutes --> Security : Encrypt/Decrypt, Hash
  AuthRoutes --> Databases : Retrieve Data
  AuthRoutes --> KyberWrapper : KeyGen/Encaps/Decaps
  KyberWrapper --> KyberLibrary.dll
  KyberWrapper --> KyberLibrary.so
}

' Databasess 
package "Database & Cache" #ffdddd {
  class Firestore <<database>>
  class Redis <<cache>>

  package "Firestore Collections" {
    class Users {
      + userId : documentId
      + username : string
      + password_hash : string
      + public_key : string
      + encrypted_secret_key : string
      + salt : string
      + iv : string
      + friends : array
      + notifications : array
      + created_at : datetime
    }
    class Messages {
      + from : string
      + to : string
      + encrypted_message : string
      + sender_encrypted_key : string
      + sender_iv : string
      + receiver_encrypted_key : string
      + receiver_iv : string
      + iv_message : string
      + timestamp : datetime
    }
  }

  Firestore --> Users
  Firestore --> Messages

  class "Redis Session Hash" as RedisSession {
      + sessionId : string
      + decrypted_private_key : string
      + aes_key : string
      + ct_sender : string
      + encrypted_aes_key : string
      + iv_sender : string
      -- TTL : 3600s --
  }

  Redis --> RedisSession
}

' Middlewares type thingy 
interface "AxiosClient"
App --> "AxiosClient"

interface "REST API"
"AxiosClient" --> "REST API" : Axios
"REST API" --> Application

@enduml
